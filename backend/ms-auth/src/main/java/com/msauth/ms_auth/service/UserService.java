package com.msauth.ms_auth.service;

import com.msauth.ms_auth.dto.RegisterDTO;
import com.msauth.ms_auth.model.User;
import com.msauth.ms_auth.repository.UserRepository;
import com.msauth.ms_auth.util.PasswordUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Servi√ßo respons√°vel pela l√≥gica de neg√≥cio de usu√°rios.
 * Gerencia cria√ß√£o, remo√ß√£o e valida√ß√£o de usu√°rios no sistema de autentica√ß√£o.
 * 
 * Funcionalidades:
 * - Cria√ß√£o de usu√°rio com senha tempor√°ria
 * - Remo√ß√£o de usu√°rio (para compensa√ß√£o SAGA)
 * - Valida√ß√£o de dados de usu√°rio
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;

    /**
     * Cria um novo usu√°rio com senha aleat√≥ria.
     * Gera senha tempor√°ria de 4 d√≠gitos e envia por email.
     * 
     * @param dto Dados do usu√°rio para cria√ß√£o
     * @return Senha tempor√°ria gerada
     * @throws RuntimeException se usu√°rio j√° existir
     */
    @Transactional
    public String criarUsuario(RegisterDTO dto) {
        log.info("üîê Criando usu√°rio: {}", dto.getLogin());
        
        // Verifica se usu√°rio j√° existe
        if (userRepository.findByLogin(dto.getLogin()) != null) {
            log.warn("‚ö†Ô∏è Tentativa de criar usu√°rio que j√° existe: {}", dto.getLogin());
            throw new RuntimeException("Usu√°rio j√° existe");
        }

        // Gera salt √∫nico e senha tempor√°ria
        String salt = PasswordUtils.generateSalt();
        String senhaAleatoria = PasswordUtils.gerarSenhaAleatoria();
        String hashed = PasswordUtils.hashPassword(senhaAleatoria, salt);

        // Cria e salva usu√°rio
        User user = new User();
        user.setLogin(dto.getLogin());
        user.setSenha(hashed);
        user.setSalt(salt);
        user.setTipo(dto.getTipo());

        userRepository.save(user);
        
        log.info("‚úÖ Usu√°rio criado com sucesso: {} - Senha tempor√°ria: {}", dto.getLogin(), senhaAleatoria);
        return senhaAleatoria;
    }

    /**
     * Remove um usu√°rio pelo login.
     * Usado para compensa√ß√£o em caso de falha na SAGA.
     * 
     * @param login Email/login do usu√°rio a ser removido
     * @throws RuntimeException se usu√°rio n√£o for encontrado
     */
    @Transactional
    public void removerUsuario(String login) {
        log.info("üóëÔ∏è Removendo usu√°rio: {}", login);
        
        User user = userRepository.findByLogin(login);
        if (user == null) {
            log.warn("‚ö†Ô∏è Tentativa de remover usu√°rio inexistente: {}", login);
            throw new RuntimeException("Usu√°rio n√£o encontrado");
        }
        
        userRepository.delete(user);
        log.info("‚úÖ Usu√°rio removido com sucesso: {}", login);
    }

    /**
     * Busca um usu√°rio pelo login.
     */
    public User buscarPorLogin(String login) {
        return userRepository.findByLogin(login);
    }
} 