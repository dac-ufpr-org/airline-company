package com.msauth.ms_auth.listener;

import com.msauth.ms_auth.dto.RegisterDTO;
import com.msauth.ms_auth.service.EmailService;
import com.msauth.ms_auth.service.UserService;
import com.mscontracts.ms_contracts.events.CompensarUsuarioEvent;
import com.mscontracts.ms_contracts.events.CriarUsuarioEvent;
import com.mscontracts.ms_contracts.events.UsuarioCriadoEvent;
import com.mscontracts.ms_contracts.queues.QueueNames;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;

/**
 * Listener respons√°vel por receber eventos relacionados √† autentica√ß√£o.
 * Participa da SAGA de autocadastro como um dos servi√ßos participantes.
 * 
 * Eventos processados:
 * - CriarUsuarioEvent: Cria usu√°rio e envia email com senha tempor√°ria
 * - CompensarUsuarioEvent: Remove usu√°rio em caso de falha na SAGA
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class AuthListener {

    private final UserService userService;
    private final EmailService emailService;
    private final RabbitTemplate rabbitTemplate;

    /**
     * Recebe evento para criar usu√°rio como parte da SAGA de autocadastro.
     * 
     * Fluxo:
     * 1. Recebe CriarUsuarioEvent do orchestrator
     * 2. Cria usu√°rio no MongoDB com senha tempor√°ria
     * 3. Envia email com senha tempor√°ria
     * 4. Envia UsuarioCriadoEvent para o orchestrator
     * 
     * @param event Evento de cria√ß√£o de usu√°rio
     */
    @RabbitListener(queues = QueueNames.AUTH_QUEUE)
    public void criarUsuario(CriarUsuarioEvent event) {
        log.info("üì• Auth recebeu solicita√ß√£o para criar usu√°rio: {} - correlationId: {}", 
                event.getEmail(), event.getCorrelationId());
        
        try {
            // Criar DTO para o servi√ßo
            RegisterDTO registerDTO = new RegisterDTO();
            registerDTO.setLogin(event.getEmail());
            registerDTO.setSenha(event.getSenha()); // Pode ser null, ser√° gerada
            registerDTO.setTipo("CLIENTE");
            
            // Criar usu√°rio e obter senha tempor√°ria
            log.info("üîê Criando usu√°rio no sistema de autentica√ß√£o: {}", event.getEmail());
            String senhaTemporaria = userService.criarUsuario(registerDTO);
            
            // Enviar email com senha tempor√°ria
            log.info("üìß Enviando email com senha tempor√°ria para: {}", event.getEmail());
            emailService.enviarSenhaTemporaria(event.getEmail(), event.getNome(), senhaTemporaria);
            
            // Enviar evento de sucesso para o orchestrator
            UsuarioCriadoEvent usuarioCriadoEvent = new UsuarioCriadoEvent(
                event.getEmail(),
                event.getNome(),
                event.getCorrelationId(),
                senhaTemporaria
            );
            
            log.info("üì§ Enviando UsuarioCriadoEvent para orchestrator: {}", event.getCorrelationId());
            rabbitTemplate.convertAndSend(QueueNames.ORCHESTRATOR_QUEUE, usuarioCriadoEvent);
            
        } catch (Exception e) {
            log.error("‚ùå Erro ao criar usu√°rio: {} - correlationId: {}", 
                    e.getMessage(), event.getCorrelationId());
            
            // Enviar email de notifica√ß√£o de falha
            log.warn("üìß Enviando email de notifica√ß√£o de falha para: {}", event.getEmail());
            emailService.enviarNotificacaoFalha(event.getEmail(), e.getMessage());
            
            // Enviar evento de falha para o orchestrator
            String errorMessage = "Falha na cria√ß√£o de usu√°rio: " + e.getMessage();
            log.error("üì§ Enviando evento de falha para orchestrator: {}", errorMessage);
            rabbitTemplate.convertAndSend(QueueNames.ORCHESTRATOR_QUEUE, errorMessage);
        }
    }

    /**
     * Recebe evento de compensa√ß√£o para remover usu√°rio criado.
     * Executado quando a SAGA falha e precisa reverter opera√ß√µes j√° realizadas.
     * 
     * @param event Evento de compensa√ß√£o com dados do usu√°rio a ser removido
     */
    @RabbitListener(queues = QueueNames.COMPENSACAO_QUEUE)
    public void compensarUsuario(CompensarUsuarioEvent event) {
        log.info("üîÑ Auth recebeu evento de compensa√ß√£o para usu√°rio: {} - correlationId: {}", 
                event.getEmail(), event.getCorrelationId());
        
        try {
            if (event.getEmail() != null) {
                log.info("üóëÔ∏è Removendo usu√°rio como parte da compensa√ß√£o: {}", event.getEmail());
                userService.removerUsuario(event.getEmail());
                log.info("‚úÖ Compensa√ß√£o executada com sucesso para usu√°rio: {}", event.getEmail());
            } else {
                log.warn("‚ö†Ô∏è Email n√£o fornecido para compensa√ß√£o - correlationId: {}", event.getCorrelationId());
            }
        } catch (Exception e) {
            log.error("‚ùå Erro ao executar compensa√ß√£o: {} - correlationId: {}", 
                    e.getMessage(), event.getCorrelationId());
        }
    }
}
