version: "3.8"

services:
  # --- INFRAESTRUTURA BASE ---
  postgres:
    image: postgres:14-alpine
    container_name: airline-postgres
    environment:
      POSTGRES_USER: airline_user
      POSTGRES_PASSWORD: airline_pass
      POSTGRES_DB: airline_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - airline-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airline_user -d airline_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6.0
    container_name: airline-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - airline-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  #  rabbitmq:
  #    image: rabbitmq:3.11-management-alpine
  #    container_name: airline-rabbitmq
  #    environment:
  #      RABBITMQ_DEFAULT_USER: rabbit_user
  #      RABBITMQ_DEFAULT_PASS: rabbit_pass
  #    ports:
  #      - "5672:5672"
  #      - "15672:15672"
  #    networks:
  #      - airline-net
  #    healthcheck:
  #      test: ["CMD", "rabbitmqctl", "status"]
  #      interval: 5s
  #      timeout: 10s
  #      retries: 10
  rabbitmq: # <-- Corrigido: agora com 2 espaços de indentação como os demais
    image: rabbitmq:3.11-management-alpine
    container_name: airline-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user
      RABBITMQ_DEFAULT_PASS: rabbit_pass
      RABBITMQ_ERLANG_COOKIE: "SECRETCOOKIE"
      RABBITMQ_NODENAME: "rabbit@localhost"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    command: sh -c "chown -R rabbitmq:rabbitmq /var/lib/rabbitmq && docker-entrypoint.sh rabbitmq-server"
    networks:
      - airline-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  # --- API GATEWAY (Node.js) ---
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: airline-api-gateway
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: development # Temporário para logs detalhados
      PORT: 8000
      JWT_SECRET: "123456"
      # URLs devem usar os nomes de serviço do Docker
      MS_AUTENTICACAO_URL: http://ms-auth:8080
      MS_CLIENTE_URL: http://ms-cliente:8080
      MS_FUNCIONARIO_URL: http://ms-funcionario:8080
      MS_VOO_URL: http://ms-voo:8080
    depends_on:
      rabbitmq:
        condition: service_healthy
      ms-auth:
        condition: service_started
      ms-cliente:
        condition: service_started
      ms-funcionario:
        condition: service_started
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:8000/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - airline-net

  # --- MICROSSERVIÇOS (Spring Boot) ---
  ms-auth:
    build:
      context: ./ms-auth
      dockerfile: Dockerfile
    container_name: airline-ms-auth
    ports:
      - "8081:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/auth_db?authSource=admin
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbit_user
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
      JWT_SECRET: "123456"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - airline-net

  ms-cliente:
    build:
      context: ./ms-cliente
      dockerfile: Dockerfile
    container_name: airline-ms-cliente
    ports:
      - "8082:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
      SPRING_DATASOURCE_USERNAME: airline_user
      SPRING_DATASOURCE_PASSWORD: airline_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbit_user
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - airline-net

  ms-voo:
    build:
      context: ./ms-voo
      dockerfile: Dockerfile
    container_name: airline-ms-voo
    ports:
      - "8083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
      SPRING_DATASOURCE_USERNAME: airline_user
      SPRING_DATASOURCE_PASSWORD: airline_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbit_user
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - airline-net

  ms-reserva:
    build:
      context: ./ms-reserva
      dockerfile: reserva/Dockerfile
    container_name: airline-ms-reserva
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
      SPRING_DATASOURCE_USERNAME: airline_user
      SPRING_DATASOURCE_PASSWORD: airline_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbit_user
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - airline-net
  ms-funcionario:
    build:
      context: ./ms-funcionario
      dockerfile: Dockerfile
    container_name: airline-ms-funcionario
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
      SPRING_DATASOURCE_USERNAME: airline_user
      SPRING_DATASOURCE_PASSWORD: airline_pass
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: rabbit_user
      SPRING_RABBITMQ_PASSWORD: rabbit_pass
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - airline-net

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data:

networks:
  airline-net:
    driver: bridge
