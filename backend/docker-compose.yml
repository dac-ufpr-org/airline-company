version: '3.8'

services:
  # --- INFRAESTRUTURA BASE ---
  postgres:
    image: postgres:14-alpine
    container_name: airline-postgres
    environment:
      POSTGRES_USER: airline_user
      POSTGRES_PASSWORD: airline_pass
      POSTGRES_DB: airline_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - airline-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airline_user -d airline_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6.0
    container_name: airline-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: auth_db
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - airline-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.11-management-alpine
    container_name: airline-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: rabbit_user
      RABBITMQ_DEFAULT_PASS: rabbit_pass
    ports:
      - "5672:5672"  # AMQP
      - "15672:15672"  # Management UI
    networks:
      - airline-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- API GATEWAY (Node.js) ---
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: airline-api-gateway
    ports:
      - "8000:8000"
    environment:
      NODE_ENV: production
      PORT: 8000
      AUTH_SERVICE_URL: http://auth-service:8080
      CLIENT_SERVICE_URL: http://client-service:8080
      FLIGHT_SERVICE_URL: http://flight-service:8080
      RESERVATION_SERVICE_URL: http://reservation-service:8080
      EMPLOYEE_SERVICE_URL: http://employee-service:8080
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - airline-net

  # --- MICROSSERVIÇOS (Spring Boot) ---
  
  # Serviço de Autenticação
  #auth-service:
  #  build:
  #    context: ./auth-service
  #    dockerfile: Dockerfile
  #  container_name: airline-auth-service
  #  ports:
  #    - "8081:8080"
  #  environment:
  #    SPRING_PROFILES_ACTIVE: docker
  #    SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/auth_db?authSource=admin
  #    SPRING_RABBITMQ_HOST: rabbitmq
  #    SPRING_RABBITMQ_PORT: 5672
  #    SPRING_RABBITMQ_USERNAME: rabbit_user
  #    SPRING_RABBITMQ_PASSWORD: rabbit_pass
  #  depends_on:
  #    mongodb:
  #      condition: service_healthy
  #    rabbitmq:
  #      condition: service_healthy
  #  networks:
  #    - airline-net

  # Template para outros microsserviços (copiar e ajustar)
  #client-service:
  #  build:
  #    context: ./client-service
  #    dockerfile: Dockerfile
  #  container_name: airline-client-service
  #  ports:
  #    - "8082:8080"
  #  environment:
  #    SPRING_PROFILES_ACTIVE: docker
  #    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
  #    SPRING_DATASOURCE_USERNAME: airline_user
  #    SPRING_DATASOURCE_PASSWORD: airline_pass
  #    SPRING_RABBITMQ_HOST: rabbitmq
  #    SPRING_RABBITMQ_PORT: 5672
  #    SPRING_RABBITMQ_USERNAME: rabbit_user
  #    SPRING_RABBITMQ_PASSWORD: rabbit_pass
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #    rabbitmq:
  #      condition: service_healthy
  #  networks:
  #    - airline-net

  #flight-service:
  #  build:
  #    context: ./flight-service
  #    dockerfile: Dockerfile
  #  container_name: airline-flight-service
  #  ports:
  #    - "8083:8080"
  #  environment:
  #    SPRING_PROFILES_ACTIVE: docker
  #    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
  #    SPRING_DATASOURCE_USERNAME: airline_user
  #    SPRING_DATASOURCE_PASSWORD: airline_pass
  #    SPRING_RABBITMQ_HOST: rabbitmq
  #    SPRING_RABBITMQ_PORT: 5672
  #    SPRING_RABBITMQ_USERNAME: rabbit_user
  #    SPRING_RABBITMQ_PASSWORD: rabbit_pass
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #    rabbitmq:
  #      condition: service_healthy
  #  networks:
  #    - airline-net

  #reservation-service:
  #  build:
  #    context: ./reservation-service
  #    dockerfile: Dockerfile
  #  container_name: airline-reservation-service
  #  ports:
  #    - "8084:8080"
  #  environment:
  #    SPRING_PROFILES_ACTIVE: docker
  #    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
  #    SPRING_DATASOURCE_USERNAME: airline_user
  #    SPRING_DATASOURCE_PASSWORD: airline_pass
  #    SPRING_RABBITMQ_HOST: rabbitmq
  #    SPRING_RABBITMQ_PORT: 5672
  #    SPRING_RABBITMQ_USERNAME: rabbit_user
  #    SPRING_RABBITMQ_PASSWORD: rabbit_pass
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #    rabbitmq:
  #      condition: service_healthy
  #  networks:
  #    - airline-net

  #employee-service:
  #  build:
  #    context: ./employee-service
  #    dockerfile: Dockerfile
  #  container_name: airline-employee-service
  #  ports:
  #    - "8085:8080"
  #  environment:
  #    SPRING_PROFILES_ACTIVE: docker
  #    SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/airline_db
  #    SPRING_DATASOURCE_USERNAME: airline_user
  #    SPRING_DATASOURCE_PASSWORD: airline_pass
  #    SPRING_RABBITMQ_HOST: rabbitmq
  #    SPRING_RABBITMQ_PORT: 5672
  #    SPRING_RABBITMQ_USERNAME: rabbit_user
  #    SPRING_RABBITMQ_PASSWORD: rabbit_pass
  #  depends_on:
  #    postgres:
  #      condition: service_healthy
  #    rabbitmq:
  #      condition: service_healthy
  #  networks:
  #    - airline-net

volumes:
  postgres_data:
  mongodb_data:

networks:
  airline-net:
    driver: bridge